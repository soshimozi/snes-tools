export class Palettes {
  static readonly pal_r = new Uint8Array([
    80, 0, 0x40, 0x80, 0xc0, 0xf8, 0x50, 0xa0, 0xf8, 0, 0, 0, 0, 0, 0, 0xc0,
    80, 0, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xf8,
    80, 0x20, 0x40, 0x60, 0x80, 0xa0, 0xc0, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8,
    80, 0, 0, 0, 0, 0, 0, 0, 0x20, 0x40, 0x60, 0x80, 0xa0, 0xc0, 0xe0, 0xf8,
    80, 0, 0, 0, 0, 0, 0, 0, 0x20, 0x40, 0x60, 0x80, 0xa0, 0xc0, 0xe0, 0xf8,
    80, 0x20, 0x40, 0x60, 0x80, 0xa0, 0xc0, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8,
    80, 0x20, 0x40, 0x60, 0x80, 0xa0, 0xc0, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8,
    80, 0, 0, 0, 0, 0, 0, 0, 0x20, 0x40, 0x60, 0x80, 0xa0, 0xc0, 0xe0, 0xf8
  ]);

  static readonly pal_g = new Uint8Array([
    248, 0, 0x40, 0x80, 0xc0, 0xf8, 0, 0, 0, 0x50, 0xa0, 0xf8, 0, 0, 0, 0xc0,
    248, 0, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xf8,
    248, 0, 0, 0, 0, 0, 0, 0, 0x20, 0x40, 0x60, 0x80, 0xa0, 0xc0, 0xe0, 0xf8,
    248, 0x20, 0x40, 0x60, 0x80, 0xa0, 0xc0, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8,
    248, 0, 0, 0, 0, 0, 0, 0, 0x20, 0x40, 0x60, 0x80, 0xa0, 0xc0, 0xe0, 0xf8,
    248, 0x20, 0x40, 0x60, 0x80, 0xa0, 0xc0, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8,
    248, 0, 0, 0, 0, 0, 0, 0, 0x20, 0x40, 0x60, 0x80, 0xa0, 0xc0, 0xe0, 0xf8,
    248, 0x20, 0x40, 0x60, 0x80, 0xa0, 0xc0, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8
  ]);

  static readonly pal_b = new Uint8Array([
    80, 0, 0x40, 0x80, 0xc0, 0xf8, 0, 0, 0, 0, 0, 0, 0x50, 0xa0, 0xf8, 0,
    80, 0, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xf8,
    80, 0, 0, 0, 0, 0, 0, 0, 0x20, 0x40, 0x60, 0x80, 0xa0, 0xc0, 0xe0, 0xf8,
    80, 0, 0, 0, 0, 0, 0, 0, 0x20, 0x40, 0x60, 0x80, 0xa0, 0xc0, 0xe0, 0xf8,
    80, 0x20, 0x40, 0x60, 0x80, 0xa0, 0xc0, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8,
    80, 0, 0, 0, 0, 0, 0, 0, 0x20, 0x40, 0x60, 0x80, 0xa0, 0xc0, 0xe0, 0xf8,
    80, 0x20, 0x40, 0x60, 0x80, 0xa0, 0xc0, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8,
    80, 0x20, 0x40, 0x60, 0x80, 0xa0, 0xc0, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8
  ]);

  /** Get RGB values as tuple [r, g, b] */
  static getRGB(index: number): [number, number, number] {
    return [
      Palettes.pal_r[index],
      Palettes.pal_g[index],
      Palettes.pal_b[index],
    ];
  }

  static getBGR(index: number): [number, number, number] {
    return [
      Palettes.pal_b[index],
      Palettes.pal_g[index],
      Palettes.pal_r[index],
    ]
  }

  /** Get RGB as hex string like "#ffeeff" */
  static getRGBString(paletteIndex: number, colorIndex: number): string {
    const [r, g, b] = Palettes.getRGB(paletteIndex * 16 + colorIndex);
    const toHex = (n: number) => n.toString(16).padStart(2, "0");
    return `#${toHex(r)}${toHex(g)}${toHex(b)}`;
  }

  static getPalette(paletteIndex: number): string[] {
    let rgb = [];

    for (let i = 0; i < 16; i++) {
      rgb.push(Palettes.getRGBString(paletteIndex, i))
    }

    return rgb;
  }


  static getBGRPalette(paletteIndex: number): string[] {

    let bgr = [];

    const pal = Palettes.getPalette(0);

    for (let i = 0; i < 16; i++) {
      const color = Palettes.getBGR(paletteIndex * 16 + i)

      const bgrHexColor = (((color[0] & 0xf8) >> 3) << 10) | (((color[1] & 0xf8) >> 3) << 5) | (((color[2] & 0xf8) >> 3) & 0x1f);
      bgr.push(bgrHexColor.toString(16).padStart(4, '0'))
    }

    return bgr;

  }
}
